        -:    0:Source:C:/PROGRA~1/JETBRA~1/CLION2~1.1/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/ext/string_conversions.h
        -:    0:Graph:C:\Users\Th\CLionProjects\W12-Test-Attempt-Bills\cmake-build-debug-coverage\CMakeFiles\W12_Test_Attempt_Bills.dir\Domain\Bill.cpp.gcno
        -:    0:Data:C:\Users\Th\CLionProjects\W12-Test-Attempt-Bills\cmake-build-debug-coverage\CMakeFiles\W12_Test_Attempt_Bills.dir\Domain\Bill.cpp.gcda
        -:    0:Runs:1
        -:    1:// String Conversions -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2008-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/string_conversions.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _STRING_CONVERSIONS_H
        -:   30:#define _STRING_CONVERSIONS_H 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#if __cplusplus < 201103L
        -:   35:# include <bits/c++0x_warning.h>
        -:   36:#else
        -:   37:
        -:   38:#include <bits/c++config.h>
        -:   39:#include <ext/numeric_traits.h>
        -:   40:#include <bits/functexcept.h>
        -:   41:#include <cstdlib>
        -:   42:#include <cwchar>
        -:   43:#include <cstdio>
        -:   44:#include <cerrno>
        -:   45:
        -:   46:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   47:{
        -:   48:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   49:
        -:   50:  // Helper for all the sto* functions.
        -:   51:  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
        -:   52:	   typename... _Base>
        -:   53:    _Ret
function _ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PyS9_ called 5 returned 100% blocks executed 67%
        5:   54:    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
        -:   55:	   const char* __name, const _CharT* __str, std::size_t* __idx,
        -:   56:	   _Base... __base)
        -:   57:    {
        -:   58:      _Ret __ret;
        -:   59:
        -:   60:      _CharT* __endptr;
        -:   61:
        -:   62:      struct _Save_errno {
function _ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PyS9_EN11_Save_errnoC1Ev called 5 returned 100% blocks executed 100%
        5:   63:	_Save_errno() : _M_errno(errno) { errno = 0; }
        5:   63-block  0
call    0 returned 5
call    1 returned 5
function _ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PyS9_EN11_Save_errnoD1Ev called 5 returned 100% blocks executed 100%
        5:   64:	~_Save_errno() { if (errno == 0) errno = _M_errno; }
        5:   64-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:   64-block  1
call    3 returned 5
        -:   65:	int _M_errno;
        5:   66:      } const __save_errno;
        5:   66-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   67:
        -:   68:      struct _Range_chk {
        -:   69:	  static bool
function _ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PyS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE called 5 returned 100% blocks executed 100%
        5:   70:	  _S_chk(_TRet, std::false_type) { return false; }
        5:   70-block  0
        -:   71:
        -:   72:	  static bool
        -:   73:	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
        -:   74:	  {
        -:   75:	    return __val < _TRet(__numeric_traits<int>::__min)
        -:   76:	      || __val > _TRet(__numeric_traits<int>::__max);
        -:   77:	  }
        -:   78:      };
        -:   79:
        5:   80:      const _TRet __tmp = __convf(__str, &__endptr, __base...);
        5:   80-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   81:
        5:   82:      if (__endptr == __str)
        5:   82-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:   83:	std::__throw_invalid_argument(__name);
    %%%%%:   83-block  0
call    0 never executed
        5:   84:      else if (errno == ERANGE
        5:   84-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
       5*:   85:	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
        5:   85-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:   85-block  1
call    2 returned 5
branch  3 taken 0 (fallthrough)
branch  4 taken 5
    %%%%%:   85-block  2
        5:   85-block  3
        5:   85-block  4
branch  5 taken 0 (fallthrough)
branch  6 taken 5
    $$$$$:   85-block  5
    #####:   86:	std::__throw_out_of_range(__name);
    %%%%%:   86-block  0
call    0 never executed
        -:   87:      else
        5:   88:	__ret = __tmp;
        -:   89:
        5:   90:      if (__idx)
        5:   90-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:   91:	*__idx = __endptr - __str;
    %%%%%:   91-block  0
        -:   92:
        5:   93:      return __ret;
        5:   93-block  0
        5:   94:    }
        5:   94-block  0
call    0 returned 5
    $$$$$:   94-block  1
call    1 never executed
        -:   95:
        -:   96:  // Helper for the to_string / to_wstring functions.
        -:   97:  template<typename _String, typename _CharT = typename _String::value_type>
        -:   98:    _String
        -:   99:    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
        -:  100:				 __builtin_va_list), std::size_t __n,
        -:  101:		 const _CharT* __fmt, ...)
        -:  102:    {
        -:  103:      // XXX Eventually the result should be constructed in-place in
        -:  104:      // the __cxx11 string, likely with the help of internal hooks.
        -:  105:      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
        -:  106:							  * __n));
        -:  107:
        -:  108:      __builtin_va_list __args;
        -:  109:      __builtin_va_start(__args, __fmt);
        -:  110:
        -:  111:      const int __len = __convf(__s, __n, __fmt, __args);
        -:  112:
        -:  113:      __builtin_va_end(__args);
        -:  114:
        -:  115:      return _String(__s, __s + __len);
        -:  116:    }
        -:  117:
        -:  118:_GLIBCXX_END_NAMESPACE_VERSION
        -:  119:} // namespace
        -:  120:
        -:  121:#endif // C++11
        -:  122:
        -:  123:#endif // _STRING_CONVERSIONS_H
